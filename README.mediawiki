=bcheck=

'''Author:''' Bryce Campbell

'''License:''' See LICENSE

'''Description:''' A crate for Rust that allows one to read and write bcheck files generated by <a href="https://github.com/bryceac/BCheckbook">BCheckbook</a>.

'''Version:''' 0.3.1

==Notes==

This crate has been tested with Rust 1.59.0 on macOS and with Rust on Windows. It is not known if it will work in earlier versions, though it should if the dependencies are also backwards compatible.

===Why Create this library===

After having made an application that could serve as a Checkbook ledger, I thought it would be nice to create a way to read and write the saves in Rust, 
so that I can create an applications for application besides macOS and iOS, as well as learn more about serde, to see if I can 
customize serialization and deserialization as much as I could with Codable in Swift, and hopefully save others time figuring out how those files are read properly.

While it might be sometime before I can actually use this code to do anything, due to the current state of GUI programming with Rust 
and <a href="https://github.com/redox-os/orbtk">OrbTk</a>, the most promising of the bunch for doing cross platform stuff, does not quite 
yet have everything I need at the of writing this.

===Version History===

<dl>
<dt style="font-weight:bold">0.1</dt>
<dd>Initial release. Released 7/18/2021</dd>
<dt style="font-weight:bold">0.2</dt>
<dd>
<p>Made it easier to create record objects, so that dependencies do not need to be exposed, 
and remove unneeded re exports.</p>
<p>Released 7/19/2021</p>
</dd>
<dt style="font-weight:bold">0.2.1</dt>
<dd>
<p>Make it possible to parse transaction type from string. Released 7/23/2021</p>
</dd>
<dt style="font-weight:bold">0.2.2</dt>
<dd>
<p>Add extension trait that adds method to String and str to make getting dates easier. Released 7/26/2021</p>
</dd>
<dt style="font-weight:bold">0.3</dt>
<dd>
<p>Update Transaction model to reflect the current state of the bcheck format.</p>
<p>Released 1/13/2022</p>
</dd>
</dl>

===Usage===

To use this library, add the following to your <strong>Cargo.toml</strong> file:

<pre>
[dependencies]
bcheck = "0.3"
</pre>

Afterwards, it is as simple as putting in something like this, if you just need the Record type:

<pre>
use bcheck::Record;
</pre>

There ae two other types that can be used when needed, which are <strong>Transaction</strong> and <strong>TransactionType</strong>.

These three should provide everything needed to parse bcheck files properly and do operations on them in code.

====Saving Data====

To save Data, the only thing that <strong>should</strong> be needed is to import the <strong>Save</strong> trait, in addition to the <strong>Record</strong> type, which will enable a save method on vectors of type Vec<Record>.

This can done like this:

<pre>
use bcheck::{ Record, Save }
</pre>

Afterwards, it can be called like this:

<pre>
let records = vec![Record::new()];

if let Err(error) = records.save("/Users/bob/Document/example.bcheck") {
    println!("{}", error)
}
</pre>

===Creating Date objects===

If you import the <strong>LocalDateTimeStringExt</strong> trait, dates can be created like this:

<pre>
"2021-7-26".local_dateime().unwrap()
</pre>

===Contributing===

If you think you can help make this crate better, feel free to fork this project and make a pull request.

Like the BCheckbook program, I will test the changes, to see if they work as they should.

===Support===

Due to my limited Rust experience, in comparison to my experience with Rust, I cannot provide much support, 
so expect to be on your own.

However, I can try to check things out, so feel free to contact me at the email below:

tonyhawk2100@gmail.com
